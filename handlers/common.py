<<<<<<< HEAD
from aiogram import types
from aiogram.dispatcher import FSMContext
from create_bot import dp
from create_bot import ProfileStatesGroup
from datetime import datetime
from db import insert_bill_record


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ 'start' –∏ cancel
# @dp.message_handler(commands=['start', 'cancel'], state='*')
async def cmd_start_cancel(message: types.Message, state: FSMContext):
    await ProfileStatesGroup.Document.set()
    await message.answer(text=f"""–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {message.from_user.full_name}!
–í–≤–µ–¥–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, '<code>–ï–ü–î</code>'):""", parse_mode='html')
    
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö "–î–æ–∫—É–º–µ–Ω—Ç"
# @dp.message_handler(state=ProfileStatesGroup.Document)
async def get_period(message: types.Message, state: FSMContext):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ "–î–æ–∫—É–º–µ–Ω—Ç" –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    # await state.update_data(Doc=message.text)
    async with state.proxy() as data:
        data['Doc'] = message.text
    # –ù–∞–∑–Ω–∞—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º "–ü–µ—Ä–∏–æ–¥ –æ–ø–ª–∞—Ç—ã"
    await ProfileStatesGroup.Period.set()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –æ–ø–ª–∞—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, '<code>01.2023</code>'):", parse_mode='html')

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö "–ü–µ—Ä–∏–æ–¥ –æ–ø–ª–∞—Ç—ã"
# @dp.message_handler(state=ProfileStatesGroup.Period)
async def get_amount(message: types.Message, state: FSMContext):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ "–ü–µ—Ä–∏–æ–¥ –æ–ø–ª–∞—Ç—ã" –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    # await state.update_data(Per=message.text)
    async with state.proxy() as data:
        data['Per'] = message.text
    await ProfileStatesGroup.Amount.set()
    await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –æ–ø–ª–∞—Ç—ã:')

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö "–°—É–º–º–∞" –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –ë–î
# @dp.message_handler(state=ProfileStatesGroup.Amount)
async def save_to_database(message: types.Message, state: FSMContext):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ "–°—É–º–º–∞" –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    # await state.update_data(Amm=message.text)
=======
from datetime import datetime
from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.types import InputFile

from config import DB_PATH
from create_bot import dp, ProfileStatesGroup
from db import insert_bill_record
from modules.save_to_file import save_csv, save_txt, save_xlsx


# –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã start - –∑–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –æ —Ç–∏–ø–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
async def cmd_start(message: types.Message, state: FSMContext):
    await state.finish()
    await ProfileStatesGroup.Document.set()
    await message.answer(text=f"""–ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}!
–í–≤–µ–¥–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, '<code>–ï–ü–î</code>'):""", parse_mode="html")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã cancel
async def cmd_cancel(message: types.Message, state: FSMContext):
    await state.finish()
    await message.answer(text="–ü—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞ –æ—Ç–º–µ–Ω–∞ –∑–∞–ø–∏—Å–∏. –ö–∞–∫ –±—É–¥–µ—à—å –≥–æ—Ç–æ–≤ –≤–Ω–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ, –Ω–∞–∂–º–∏ /start")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã help
async def cmd_help(message: types.Message, state: FSMContext):
    await message.answer(text="""–ë–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ —Å—á–µ—Ç–∞–º –∑–∞ –∫–æ–º–º—É–Ω–∞–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏ üè°

<b>–°–ø–∏—Å–æ–∫ –∫–æ–º–º–∞–Ω–¥:</b>
/start ‚Äî –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º. –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤–Ω–µ—Å–µ–Ω–∏—è –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
/cancel ‚Äî –æ—Ç–º–µ–Ω–∞ –∑–∞–ø–∏—Å–∏ –∏ —Å–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏–π –±–æ—Ç–∞
/save_xlsx ‚Äî –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î –≤ —Ñ–æ—Ä–º–∞—Ç–µ xlsx
/save_csv ‚Äî –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î –≤ —Ñ–æ—Ä–º–∞—Ç–µ csv
/save_txt ‚Äî –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î –≤ —Ñ–æ—Ä–º–∞—Ç–µ txt                                               
""",
parse_mode="html")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö "–î–æ–∫—É–º–µ–Ω—Ç" + —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è "–ü–µ—Ä–∏–æ–¥"
async def get_period(message: types.Message, state: FSMContext):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ "–î–æ–∫—É–º–µ–Ω—Ç" –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    async with state.proxy() as data:
        data['Doc'] = message.text
    # –ù–∞–∑–Ω–∞—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ "–ü–µ—Ä–∏–æ–¥ –æ–ø–ª–∞—Ç—ã"
    await ProfileStatesGroup.Period.set()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –æ–ø–ª–∞—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, '<code>01.2023</code>'):", parse_mode='html')

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö "–ü–µ—Ä–∏–æ–¥ –æ–ø–ª–∞—Ç—ã" + —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è "–°—É–º–º–∞"
async def get_amount(message: types.Message, state: FSMContext):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ "–ü–µ—Ä–∏–æ–¥ –æ–ø–ª–∞—Ç—ã" –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    async with state.proxy() as data:
        data['Per'] = message.text
    await ProfileStatesGroup.Amount.set()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –æ–ø–ª–∞—Ç—ã:")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö "–°—É–º–º–∞" –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –ë–î
async def save_to_database(message: types.Message, state: FSMContext):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ "–°—É–º–º–∞" –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
>>>>>>> main
    async with state.proxy() as data:
        data['Amm'] = message.text

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
    current_date = datetime.now().strftime('%d-%m-%Y %H:%M')
    username = message.from_user.full_name

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤ –ë–î
    async with state.proxy() as data:
        db_data = (
            current_date,
            username,
            data['Doc'],
            data['Per'],
            data['Amm']
        )
        insert_bill_record(db_data)

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    await state.finish()
<<<<<<< HEAD
    await message.answer('–°–ø–∞—Å–∏–±–æ! –¢—ã –ª—É—á—à–µ –≤—Å–µ—Ö!')


########### –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ ##########################################################
# –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ handlers –¥–ª—è –±–æ—Ç–∞ - –æ–Ω–∏ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª bot.py
def register_handlers_common(dp: dp):
    dp.register_message_handler(cmd_start_cancel, commands=['start', 'cancel'], state='*')
    dp.register_message_handler(get_period, state=ProfileStatesGroup.Document)
    dp.register_message_handler(get_amount, state=ProfileStatesGroup.Period)
    dp.register_message_handler(save_to_database, state=ProfileStatesGroup.Amount)
=======
    await message.answer("–°–ø–∞—Å–∏–±–æ! –£–≤–∏–¥–∏–º—Å—è –≤ —Å–ª–µ–¥—É—é—â–µ–º –º–µ—Å—è—Ü–µ!")


# –≠–ö–°–ü–û–†–¢ –ò–ó –ë–î
# –≠–∫—Å–ø–æ—Ä—Ç –≤ csv
async def send_csv(message: types.Message):
    save_csv(DB_PATH)
    with open('./persistant_data/database.csv', 'rb') as csv_file:
        await message.answer_document(document=InputFile(csv_file))

# –≠–∫—Å–ø–æ—Ä—Ç –≤ xlsx
async def send_xlsx(message: types.Message):
    save_xlsx(DB_PATH)
    with open('./persistant_data/database.xlsx', 'rb') as xlsx_file:
        await message.answer_document(document=InputFile(xlsx_file))

# –≠–∫—Å–ø–æ—Ä—Ç –≤ txt
async def send_txt(message: types.Message):
    save_txt(DB_PATH)
    with open('./persistant_data/database.txt', 'rb') as txt_file:
        await message.answer_document(document=InputFile(txt_file))


# –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –û–ë–†–ê–ë–û–¢–ß–ò–ö–û–í
def register_handlers_common(dp: dp):
    dp.register_message_handler(send_csv, commands=['save_csv'], state='*')
    dp.register_message_handler(send_xlsx, commands=['save_xlsx'], state='*')
    dp.register_message_handler(send_txt, commands=['save_txt'], state='*')

    dp.register_message_handler(cmd_start, commands=['start'], state='*')
    dp.register_message_handler(cmd_cancel, commands=['cancel'], state='*')
    dp.register_message_handler(cmd_help, commands=['help'], state='*')

    dp.register_message_handler(get_period, state=ProfileStatesGroup.Document)
    dp.register_message_handler(get_amount, state=ProfileStatesGroup.Period)
    dp.register_message_handler(save_to_database, state=ProfileStatesGroup.Amount)

>>>>>>> main
